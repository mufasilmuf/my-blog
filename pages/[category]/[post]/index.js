import Head from "next/head";
import React from "react";
import { gql } from "@apollo/client";

import client from "../../../apollo-client";
import Footer from "../../../components/footer/footer";
import Header from "../../../components/header/header";
import PostDetail from "../../../components/section/postSection";

const headerData = gql`
query{
  categories{
    id
    name
    slug
  }
}`;

const postData = gql`
query articles($article_slug: String!){
    articles(where:{slug: $article_slug}){
      id
      title
      slug
      description
      content
      createdAt
      category{
        name
      }
      image{
        url
      }
      poster_image{
        url
      }
      author{
        id
        name
        details
        picture{
          url
        }
      }
    }
}`;

const relatedPostData = gql`
query categories($category_slug: String!){
    categories(where:{slug: $category_slug}) {
      id
      name
      slug
      articles {
        id
        title
        slug
        description
        category{
          name
        }
        author {
          id
          name
          picture{
            url
          }
        }
        image{
          url
        }
        createdAt
      }
    }
}`;

var hostname = "https://my-blog-seven-phi.vercel.app";
var href = "https://my-blog-seven-phi.vercel.app";

if (typeof window !== 'undefined') {
  hostname = window.location.origin;
  href = window.location.href
};

const fetchHeaderData = async () => {
  const { data } = await client.mutate({
    mutation: headerData
  })
  return data;
}

const fetchPostDetails = async (slug) => {
  const { data } = await client.mutate({
    variables: { article_slug: slug },
    mutation: postData
  })
  return data
}

const fetchRelatedPost = async (slug) => {
  const { data } = await client.mutate({
    variables: { category_slug: slug },
    mutation: relatedPostData
  })
  return data
}

export const getStaticPaths = async () => {
  const articles = await fetch(process.env.STRAPI_URL + '/articles');
  const data = await articles.json();
  const articlestSlug = [];

  data.map((article) => {
    if (article.slug != '' || article.slug != null) {
      articlestSlug.push(article);
    }
  })

  const paths = articlestSlug.map((path) => {
    return {
      params: {
        category: path.category.slug,
        post: path.slug
      }
    }
  })

  return {
    paths,
    fallback: false
  }
}

export const getStaticProps = async (context) => {
  const { params } = context;
  const postDetail = await fetchPostDetails(params.post);
  const relatedPost = await fetchRelatedPost(params.category);
  const headerData = await fetchHeaderData();

  return {
    props: {
      postInfo: postDetail.articles,
      relatedPosts: relatedPost.categories,
      headers: headerData.categories
    },
  }
}

const Articles = (props) => {
  const { postInfo, relatedPosts, headers } = props;

  return <>
    <Head>
      <title>Home</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <Header HeaderData={headers} />
    <PostDetail postDetails={postInfo} relatedPost={relatedPosts[0].articles} category_slug={relatedPosts[0].slug} />
    <Footer />
  </>
}
export default Articles;